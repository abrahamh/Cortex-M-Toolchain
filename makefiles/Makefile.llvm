#
# Makefile - create llvm/clang
# Copyright (C) 2015-2017 Heiko Abraham
# All rights reserved.
#

include Makefile.def


TARGET=arm-none-eabi
COMPILER_RT_SRC=$(COMPILER_RT_VERSION).src/lib/builtins/


COMPILER_RT_FILES_TOP=assembly.h \
	fp_lib.h \
	int_endianness.h \
	int_lib.h \
	int_types.h \
	int_util.h

	
COMPILER_RT_FILES_ARM=arm/aeabi_memcpy.S \
	arm/divmodsi4.S \
	arm/udivmodsi4.S \
	arm/aeabi_dcmp.S \
	arm/aeabi_div0.c \
	arm/aeabi_drsub.c \
	arm/aeabi_fcmp.S \
	arm/aeabi_frsub.c \
	arm/aeabi_idivmod.S \
	arm/aeabi_ldivmod.S \
	arm/aeabi_uidivmod.S \
	arm/aeabi_uldivmod.S
	
	
.PHONY: build
build:
	$(MAKE) -f $(MAKEFILENAME) build_clang


.PHONY: clean
clean:
	$(RM) -rf    $(BUILD_DIR)/$(LLVM_VERSION)
	$(RM) -rf    $(BUILD_DIR)/$(LLVM_VERSION).src
	$(RM) -rf    $(BUILD_DIR)/$(LLVM_VERSION).build


.PHONY: install
install:
	( cd $(BUILD_DIR)/$(LLVM_VERSION).build && \
		$(PATH_EXT) time make install )
	( cd $(DEST_PREFIX)/bin && ln -sf clang $(TARGET)-clang )
	( cd $(DEST_PREFIX)/bin && ln -sf clang++ $(TARGET)-clang++ )
	$(MKDIR) -p $(DEST_PREFIX)/local/include
	( cd $(DEST_PREFIX)/lib/clang && ln -sf $(LLVM_VERSION_NO) current )
	$(MAKE) -f $(MAKEFILENAME) compiler_rt
	$(MAKE) -f $(MAKEFILENAME) pack_clang

.PHONY: uninstall
uninstall:
	( cd $(DEST_PREFIX)/bin && $(RM) -f clang $(TARGET)-clang )
	( cd $(DEST_PREFIX)/bin && $(RM) -f clang++ $(TARGET)-clang++ )
	$(RM) -rf $(DEST_PREFIX)/local/include
	$(RM) -rf $(DEST_PREFIX)/lib/clang

.PHONY: extract_clang
extract_clang:
	( cd $(BUILD_DIR)/$(LLVM_VERSION).src/tools/ && $(RM) -rf $(CLANG_VERSION) )
	( cd $(BUILD_DIR)/$(LLVM_VERSION).src/tools/ && $(RM) -rf $(CLANG_VERSION).src )
	tar -xJf $(DOWNLOAD_DIR)/$(CLANG_VERSION).tar.xz -C $(BUILD_DIR)/$(LLVM_VERSION).src/tools/
	( cd $(BUILD_DIR)/$(LLVM_VERSION).src/tools && mv $(CLANG_VERSION).src clang )


.PHONY: extract_lldb
extract_lldb:
	( cd $(BUILD_DIR)/$(LLVM_VERSION).src/tools/ && $(RM) -rf $(LLDB_VERSION) )
	( cd $(BUILD_DIR)/$(LLVM_VERSION).src/tools/ && $(RM) -rf $(LLDB_VERSION).src )
	tar -xJf $(DOWNLOAD_DIR)/$(LLDB_VERSION).tar.xz -C $(BUILD_DIR)/$(LLVM_VERSION).src/tools/
	( cd $(BUILD_DIR)/$(LLVM_VERSION).src/tools && mv $(LLDB_VERSION).src lldb )


.PHONY: build_clang
build_clang: $(BUILD_DIR)
	$(RM) -rf    $(BUILD_DIR)/$(LLVM_VERSION)
	$(RM) -rf    $(BUILD_DIR)/$(LLVM_VERSION).src
	$(RM) -rf    $(BUILD_DIR)/$(LLVM_VERSION).build
	$(MKDIR) -p  $(BUILD_DIR)/$(LLVM_VERSION).build
	tar -xJf $(DOWNLOAD_DIR)/$(LLVM_VERSION).tar.xz -C $(BUILD_DIR)
	$(MAKE) -f $(MAKEFILENAME) CVER=$(CVER) extract_clang
	# $(MAKE) -f $(MAKEFILENAME) CVER=$(CVER) extract_lldb
	( cd $(BUILD_DIR)/$(LLVM_VERSION).build && \
		$(PATH_EXT) cmake ../$(LLVM_VERSION).src \
		-G "Unix Makefiles" \
		-DCMAKE_BUILD_TYPE=Release \
		-DCMAKE_INSTALL_PREFIX:PATH=$(DEST_PREFIX) \
		-DCMAKE_CROSSCOMPILING=True \
		-DLLVM_TARGETS_TO_BUILD=ARM \
		-DLLVM_DEFAULT_TARGET_TRIPLE=$(TARGET) \
		-DLLVM_TARGET_ARCH=host \
		-DLLVM_ENABLE_PIC=True \
		-DLLVM_ENABLE_THREADS=ON \
		-DLLVM_ENABLE_ASSERTIONS:BOOL=OFF \
		-DLLVM_ENABLE_CXX1Y:BOOL=ON \
		-DLLVM_BUILD_DOCS=Off \
		-DLLVM_BUILD_LLVM_DYLIB=ON \
		-DLLVM_LINK_LLVM_DYLIB=ON \
		-DLLVM_OPTIMIZED_TABLEGEN:BOOL=ON \
		-DLLVM_PARALLEL_COMPILE_JOBS:STRING=$(NUM_CPUS) )
	( cd $(BUILD_DIR)/$(LLVM_VERSION).build && \
		$(PATH_EXT) time make $(MJOBS) )


.PHONY: pack_clang
pack_clang: 
	rm -f ../arm_cortex_m_toolchain_$(CVER).tar.gz
	( cd $(BUILD_DIR) && rm -rf $(BINUTIL_VERSION) )
	( cd $(BUILD_DIR) && rm -rf $(CMAKE_VERSION) )
	( cd $(BUILD_DIR) && rm -rf $(LLVM_VERSION).build )
	( cd $(BUILD_DIR) && rm -rf $(LLVM_VERSION).src )
	( cd $(BUILD_DIR) && rm -rf usr-host )
	( cd $(BUILD_DIR) && tar -f ../arm_cortex_m_toolchain_$(CVER).tar.gz -cpz . )


# add compiler_rt for Cortex-M3/M4
compiler_rt:
	$(MKDIR) -p $(PREFIX)/share/compiler_rt/arm
	echo "origin source for this directory, LLVM $(COMPILER_RT_VERSION)" \
		> $(PREFIX)/share/compiler_rt/arm/readme.txt
	rm -rf temp_compiler_rt
	$(MKDIR) temp_compiler_rt
	tar -xJf $(DOWNLOAD_DIR)/$(COMPILER_RT_VERSION).tar.xz -C temp_compiler_rt	
	for filename in $(COMPILER_RT_FILES_TOP) ; do \
	    cp temp_compiler_rt/$(COMPILER_RT_SRC)/$${filename} $(PREFIX)/share/compiler_rt/ ;\
	done
	for filename in $(COMPILER_RT_FILES_ARM) ; do \
	    cp temp_compiler_rt/$(COMPILER_RT_SRC)/$${filename} $(PREFIX)/share/compiler_rt/$${filename} ;\
	done  
	rm -rf temp_compiler_rt
